# Zsh config

#TODO: this needs to be removed is a nixos bug
#source "${XDG_CONFIG_HOME:-$HOME/.config}/zsh/.zshenv"

# Set history position ans number of records saved
##HISTFILE=~/.cache/zsh/histfile already set in zprofile
HISTSIZE=1000
SAVEHIST=1000

# Load aliases if existent
[ -f "${XDG_CONFIG_HOME:-$HOME/.config}/aliasrc" ] && source "${XDG_CONFIG_HOME:-$HOME/.config}/aliasrc"

# Autoload prompt theme system
zstyle ':completion:*' menu select cache-path ${XDG_CACHE_HOME:-$HOME/.cache}/zsh/zcompcache # Enable autocompletion with arrow keys

# Highlight the current autocomplete option
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# Better SSH/Rsync/SCP Autocomplete
zstyle ':completion:*:(scp|rsync|rsyncp):*' tag-order ' hosts:-ipaddr:ip\ address hosts:-host:host files'
zstyle ':completion:*:(ssh|scp|rsync|rsyncp):*:hosts-host' ignored-patterns '*(.|:)*' loopback ip6-loopback localhost ip6-localhost broadcasthost
zstyle ':completion:*:(ssh|scp|rsync|rsyncp):*:hosts-ipaddr' ignored-patterns '^(<->.<->.<->.<->|(|::)([[:xdigit:].]##:(#c,2))##(|%*))' '127.0.0.<->' '255.255.255.255' '::1' 'fe80::*'

# Allow for autocomplete to be case insensitive
zstyle ':completion:*' matcher-list '' 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' \
  '+l:|?=** r:|?=**'

autoload -U compinit promptinit && compinit -i
zmodload zsh/complist

# The folder must exist!!!
compinit -d ${XDG_CACHE_HOME:-$HOME/.cache}/zsh/zcompdump-$ZSH_VERSION # Enable completition
promptinit				# Enable completion listing extensions
_comp_options+=(globdots)		# Include hidden files in autocompletion.

# This will set the default prompt to the walters theme
prompt walters
setopt prompt_sp #to fix a bug that wats stdout lines that do not go to newline

# Change prompt:
setopt autocd		# Automatically cd into typed directory.
stty stop undef		# Disable ctrl-s to freeze terminal.

# Vim mode for zsh change with -e to emacs(std of bash)
bindkey -v
export KEYTIMEOUT=1

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history
bindkey -v '^?' backward-delete-char

zsh_reload() {
    source $HOME/.zshenv && source ${ZDOTDIR:-$HOME}/.zshrc
}

# Use lf(file manager) to switch directories and bind it to ctrl-o
lfcd () {
	tmp="$(mktemp)"
	lf -last-dir-path="$tmp" "$@"
	if [ -f "$tmp" ]; then
		dir="$(cat "$tmp")"
		rm -f "$tmp" >/dev/null
		[ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
	fi
}
bindkey -s '^o' 'lfcd\n'

bindkey -s '^a' 'bc -l\n' # for calcluator

bindkey -s '^f' 'cd "$(dirname "$(fzf)")"\n' # use fuzzy finder

bindkey '^[[P' delete-char

# Coax zsh to reash its own command cache when it goes out of date
# used when a package is installed so it will be available with zsh completion
#
zshcache_time="$(date +%s%N)"

autoload -Uz add-zsh-hook

rehash_precmd() {
	if [[ -a /var/cache/zsh/pacman ]]; then
		local paccache_time="$(date -r /var/cache/zsh/pacman +%s%N)"
		if (( zshcache_time < paccache_time )); then
			rehash
			zshcache_time="$paccache_time"
		fi
	fi
}
add-zsh-hook -Uz precmd rehash_precmd

# Edit line in vim with ctrl-e:
autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line

# Load wpgtk colorscheme
(cat $HOME/.cache/wal/sequences &)

## @brief open man page with vim as a pager
## @param man parameters
viman() {
    ## env: to evaluate a command with a particualar environment variable
    ##      removes the use of `export` that overwrites environment varaibles 
    ## MANPAGER: env variable to let man run with a particular pager
    ## vim:
    ##     --not-a-term (vim >= 8.0.1208 Nov 2017) remove complaints of stdin 
    ##     not beeing a TTY
    ##     -M modifications not allowed
    ##     +MANPAGER use the manpager.vim built into vim to read colorescaped
    ##      man pages from vim (:help manpager.vim)
    ##     - read from stdin
    ## man $1: run man with the input the first parameter of the function
    env MANPAGER='vim --not-a-term -M +MANPAGER -' man "$@"
}

## @brief open man page with neovim as a pager
## @param man parameters
nvman(){
    ## env: to evaluate a command with a particualar environment variable
    ##      removes the use of `export` that overwrites environment varaibles 
    ## MANPAGER: env variable to let man run with a particular pager
    ## vim:
    ##     -M modifications not allowed
    ##     +Man! use the man.lua built in lua script to display the current
    ##     buffer contents as a manpage (:help Man)
    ##     - read from stdin
    ## man $1: run man with the input the first parameter of the function
    env MANPAGER='nvim -M +Man! -' man "$@"
}

## @brief open man page with either neovim, vim or default to less as a pager
## @param man parameters
vman() {
    if $(command -pv nvim >/dev/null 2>&1) ; then
        nvman "$@"
    elif $(command -pv vim >/dev/null 2>&1) ; then
        viman "$@"
    else
        man "$@"
    fi
     
}

# Load syntax highlighting; should be last. (the plugin must be installed)
source /usr/share/zsh/plugins/fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh 2>/dev/null
